@page "/PlayerPage"
@using KnownUniversePoliticsGameWebApp.Data
@using KnownUniversePoliticsGameWebApp.Pages.Bank_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Store_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Military_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Trade
@inject KnownUniversePoliticsGameService PoliticsGameService
@inject KUPEventService EventService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

@code {
    bool LoggedIn = false;
    bool logginError = false;
    string Password = "";
    string Username = "";
    KUPPlayer? player;
    
    bool GetLoggedInValue = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GetLoggedInValue)
        {
            var loggedIn = await localStorage.GetItemAsync<string>("LoggedIn");
            if (loggedIn == "True")
            {
                LoggedIn = true;
                var playerName = await localStorage.GetItemAsync<string>("LoggedInAs");
                player = PoliticsGameService.GetPlayer(playerName);
            }
        }
    }

    private void Login()
    {
        try
        {
            if (!PoliticsGameService.Login(Username, Password))
            {
                logginError = true;
            }
            else
            {
                player = PoliticsGameService.GetPlayer(Username);
                LoggedIn = true;
                localStorage.SetItemAsync("LoggedIn", "True");
                localStorage.SetItemAsync("LoggedInAs", player.Name);
    //NavigationManager.NavigateTo("/PlayerPage",true);
            }
        }
        catch (Exception e)
        {
            logginError = true;
        }
    }

    private void Loggout()
    {
        LoggedIn = false;
        localStorage.SetItemAsync("LoggedIn", "False");
        localStorage.SetItemAsync("LoggedInAs", "");
    // NavigationManager.NavigateTo("/PlayerPage", false);
    }

    private void AlreadyLoggedIn()
    {
    }
    
    enum PlayerMenuChoice

    {
        FactionRelations,
        Message,
        FactionView,
        Military,
        Trade,
        Store,
        Bank
    }

    PlayerMenuChoice MenuChoice { get; set; } = PlayerMenuChoice.FactionRelations;

}

@if (!LoggedIn || player == null)
{
    if (logginError)
    {
        <p style="text-color: red">Error you put something in wrong when logging in.</p>
    }
    <div class="vstack gap-2 col-md-4 align-content-center mx-auto" style="max-width: 150px">
        <input placeholder="Username" class="form-text" type="text" id="playerName" @bind="Username" style="max-width: 150px"/>
        <input placeholder="Password" class="form-text" type="password" id="playerPassword" @bind="Password" style="max-width: 150px"/>
        <button class="btn btn-primary btn-sm" @onclick="Login"> Log In</button>
        <button class="btn btn-secondary btn-sm" @onclick="AlreadyLoggedIn">Already Logged In</button>
    </div>
}
else
{
    <div class="hstack gap-2 p-2 ">
        <h2 align="center">@player.Name</h2>
        <button class="btn btn-outline-danger ms-auto" @onclick="Loggout" >Log out</button>
    </div>

    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group mr-2" role="group">
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.FactionRelations" class="btn btn-outline-secondary">Faction Relations</button>
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.Message" class="btn btn-outline-secondary">Show Messages</button>
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.FactionView" class="btn btn-outline-secondary">Show Faction</button>
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.Bank" class="btn btn-outline-secondary">Bank</button>
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.Military" class="btn btn-outline-secondary">Military</button>
            <button type="button" @onclick="() => MenuChoice = PlayerMenuChoice.Trade" class="btn btn-outline-secondary">Trade</button>
        </div>
    </div>
    <div>
        @if (MenuChoice == PlayerMenuChoice.FactionRelations)
        {
            <PlayerViewFactionRelationships player="player"></PlayerViewFactionRelationships>
        }
        else if (MenuChoice == PlayerMenuChoice.Message)
        {
            <PlayerSendMessage player="player"></PlayerSendMessage>
        }
        else if (MenuChoice == PlayerMenuChoice.FactionView)
        {
            <FactionView Faction="player?.Faction"></FactionView>
        }
        else if (MenuChoice == PlayerMenuChoice.Store)
        {
            <PlayerStore player="player"></PlayerStore>
        }
        else if (MenuChoice == PlayerMenuChoice.Bank)
        {
            <PlayerBank player="player"></PlayerBank>
        }
        else if (MenuChoice == PlayerMenuChoice.Military)
        {
            <MilitaryPage player="player"></MilitaryPage>
        }
        else if (MenuChoice == PlayerMenuChoice.Trade)
        {
            <Trade player="player"></Trade>
        }
    </div>
}