@page "/PlayerPage"
@using KnownUniversePoliticsGameWebApp.Data
@using KnownUniversePoliticsGameWebApp.Pages.Bank_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Store_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Military_Pages
@using KnownUniversePoliticsGameWebApp.Pages.Trade
@inject KnownUniversePoliticsGameService PoliticsGameService
@inject KUPEventService EventService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@code {
    bool LoggedIn = false;
    bool logginError = false;
    string Password = "";
    string Username = "";
    KUPPlayer? player;


    bool GetLoggedInValue = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GetLoggedInValue)
        {
            
            var loggedIn = await localStorage.GetItemAsync<string>("LoggedIn");
            if (loggedIn == "True")
            {
                LoggedIn = true;
                var playerName = await localStorage.GetItemAsync<string>("LoggedInAs");
                player = PoliticsGameService.GetPlayer(playerName);
            }
        }
    }
    private void Login()
    {
        try
        {
            if (!PoliticsGameService.Login(Username, Password))
            {
                logginError = true;
            }
            else
            {
                player = PoliticsGameService.GetPlayer(Username);
                LoggedIn = true;
                localStorage.SetItemAsync("LoggedIn", "True");
                localStorage.SetItemAsync("LoggedInAs", player.Name);
    //NavigationManager.NavigateTo("/PlayerPage",true);
            }
        }
        catch (Exception e)
        {
            logginError = true;
        }
    }

    private void Loggout()
    {
        LoggedIn = false;
        localStorage.SetItemAsync("LoggedIn", "False");
        localStorage.SetItemAsync("LoggedInAs", "");
       // NavigationManager.NavigateTo("/PlayerPage", false);
    }

    private void AlreadyLoggedIn()
    {
    }
    
    enum PlayerMenuChoice

    {
        FactionRelations,
        Message,
        FactionView,
        Military,
        Trade,
        Store,
        Bank,
    }

    PlayerMenuChoice MenuChoice { get; set; } = PlayerMenuChoice.FactionRelations;

}

@if (!LoggedIn || (player == null))
{
    if (logginError)
    {
        <p style="text-color: red">Error you put something in wrong when logging in.</p>
    }
    <div class="vstack gap-2">
        <div class="hstack gap-0">
            <label class="form-label" for="playerName">Name: </label>
            <input class="form-text" type="text" id="playerName" @bind="Username"/>
        </div>
        <div  class="hstack gap-0">
        <label class="form-label" for="playerPassword">password: </label>
            <input class="form-text" type="password" id="playerPassword" @bind="Password"/>
            </div>
    </div>
    <button  class="btn btn-primary"  @onclick="Login">Try Logging in</button>
    <button class="btn btn-secondary" @onclick="AlreadyLoggedIn">Already Logged In.</button>

    }
else
{
    <div>
        <h2>@player.Name</h2>
        
    <button class="btn-danger" @onclick="Loggout">Log out</button>
         </div>          
         
    <div>
          <label class="form-label" for="SelectOption">Select player page option</label>
        <select class="form-select" id="SelectOption" @bind="MenuChoice">
            <option value="@PlayerMenuChoice.FactionRelations">Faction Relations</option>
            <option value="@PlayerMenuChoice.Message">Show Messages </option>
            <option value="@PlayerMenuChoice.FactionView">Show Faction</option>
            <option value="@PlayerMenuChoice.Bank">Bank</option>
            <option value="@PlayerMenuChoice.Military">Military</option>
            <option value="@PlayerMenuChoice.Trade">Trade</option>
        </select>
        
        @if (MenuChoice == PlayerMenuChoice.FactionRelations)
        {
            <PlayerViewFactionRelationships player="player"></PlayerViewFactionRelationships>
        }else if (MenuChoice == PlayerMenuChoice.Message)
        {
            <PlayerSendMessage player="player"></PlayerSendMessage>
        }else if (MenuChoice == PlayerMenuChoice.FactionView)
        {
            <FactionView Faction="player?.Faction"></FactionView>
        }else if (MenuChoice == PlayerMenuChoice.Store)
        {
            <PlayerStore player="player"></PlayerStore>
        }else if (MenuChoice == PlayerMenuChoice.Bank)
        {
            <PlayerBank player="player"></PlayerBank>
        }else if (MenuChoice == PlayerMenuChoice.Military){
            <MilitaryPage player="player"></MilitaryPage>
            }else if (MenuChoice == PlayerMenuChoice.Trade)
            {
                <Trade player="player"></Trade>
            }
    
    </div>
    
                  
}