@page "/PlayerPage"
@using KnownUniversePoliticsGameWebApp.Data
@inject KnownUniversePoliticsGameService PoliticsGameService
@inject KUPEventService EventService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
<h3>Your Page</h3>
@code {
    bool LoggedIn = false;
    bool logginError = false;
    string Password = "";
    string Username = "";
    int TransferAmount;
    KUPPlayer? player;

    string targetFactionName = "Game Master";
    string message;

    bool GetLoggedInValue = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (GetLoggedInValue)
        {
            
            var loggedIn = await localStorage.GetItemAsync<string>("LoggedIn");
            if (loggedIn == "True")
            {
                LoggedIn = true;
                var playerName = await localStorage.GetItemAsync<string>("LoggedInAs");
                player = PoliticsGameService.GetPlayer(playerName);
            }
        }
    }
    private void Login()
    {
        try
        {
            if (!PoliticsGameService.Login(Username, Password))
            {
                logginError = true;
            }
            else
            {
                player = PoliticsGameService.GetPlayer(Username);
                LoggedIn = true;
                localStorage.SetItemAsync("LoggedIn", "True");
                localStorage.SetItemAsync("LoggedInAs", player.Name);
    //NavigationManager.NavigateTo("/PlayerPage",true);
            }
        }
        catch (Exception e)
        {
            logginError = true;
        }
    }

    private void SendMessage()
    {
        try
        {
            var factionID = PoliticsGameService.PoliticsGame.Factions.First(x => x.Name == targetFactionName).ReceiverID;

            EventService.AddEvent(new IKUPMessageEvent(player.Faction.SenderID, factionID, message));
            targetFactionName = "";
            message = "";
        }
        catch (Exception e)
        {
            
        }
    }

    private void Loggout()
    {
        LoggedIn = false;
        localStorage.SetItemAsync("LoggedIn", "False");
        localStorage.SetItemAsync("LoggedInAs", "");
       // NavigationManager.NavigateTo("/PlayerPage", false);
    }

    private void AlreadyLoggedIn()
    {
    }

}

@if (!LoggedIn || (player == null))
{
    if (logginError)
    {
        <p style="text-color: red">Error you put something in wrong when logging in.</p>
    }
    <label for="playerName">Name: </label>
    <input type="text" class="form-control"id="playerName" @bind="Username"/>
    
    <label for="playerPassword">password: </label>
    <input type="password" class="form-control" id="playerPassword" @bind="Password"/>
    <button  class="btn btn-primary"  @onclick="Login">Try Logging in</button>
    <button class="btn btn-secondary" @onclick="AlreadyLoggedIn">Click me if you've already logged in recently.</button>
}
else
{
    <h3>@player.Name</h3>
    <button @onclick="Loggout">Log out</button>
                                   
    <ul>
        @foreach (var faction in player.Faction.FactionRelationships)
        {
            @if (faction.Value == FactionRelationshipOptions.Peace)
            {
                <li style="background: darkviolet;color:yellow;border:black;border-width: thick;border-style:solid">
                    <p>@faction.Key</p>
                    <br/>
                    <p>Current Relationship: @faction.Value</p>
                    <button type="button" @onclick="() => EventService.AddEvent(new KUPWarDeclareEvent(player.Faction.SenderID,faction.Key.ReceiverID))">To War!</button>
                    <button @onclick="() => EventService.AddEvent(new KUPDefenseEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Oath Defense</button>
                    <button @onclick="() => EventService.AddEvent(new KUPAllianceEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Oath Alliance</button>
                </li>
            }
            
            @if (faction.Value == FactionRelationshipOptions.War)
            {
                <li style="background: darkred;color: yellow;border:black;border-width: thick;border-style:solid">
                    <p>@faction.Key</p>
                    <br/>
                    <p>Current Relationship: @faction.Value</p>
                    
                    <button type="button" @onclick="() => EventService.AddEvent(new KUPPeaceEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Declare Peace!</button>
                </li>
            }
            
            @if (faction.Value == FactionRelationshipOptions.DefenceAlliance)
            {
                <li style="background: darkblue;color: yellow;border:black;border-width: thick;border-style:solid">
                    <p>@faction.Key</p>
                    <br/>
                    <p>Current Relationship: @faction.Value</p> 
                    <button type="button" @onclick="() => EventService.AddEvent(new KUPPeaceEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Declare Peace!</button>
                    <button @onclick="() => EventService.AddEvent(new KUPAllianceEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Oath Alliance</button>
                </li>
            }

            @if (faction.Value == FactionRelationshipOptions.TotalAlliance)
            {
                <li style="background: darkgreen;color: yellow;border:black;border-width: thick;border-style:solid">
                    <p>@faction.Key</p>
                    <br/>
                    <p>Current Relationship: @faction.Value</p>
                    <button type="button" @onclick="() => EventService.AddEvent(new KUPPeaceEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Declare Peace!</button>
                    <button @onclick="() => EventService.AddEvent(new KUPDefenseEvent(player.Faction.SenderID,faction.Key.ReceiverID))">Oath Defense</button>
                                </li>
            }
        }
    </ul>
                                   
    <form>
        <h5>Send Message To Faction</h5>
        <label for="targetFaction">Target Faction</label>
        <select list="targetFactions" id="targetFaction" name="targetFaction" @bind="targetFactionName">
            @foreach (var faction in PoliticsGameService.PoliticsGame.Factions)
            {
                <option value="@faction.Name">
                    @faction.Name
                </option>
            }
        </select>
                <label for="message">Message: </label>
        <input type="text" id="message" name="message" @bind="message"/>
        <button  class="btn btn-primary"  type="button" @onclick="SendMessage">Send Message</button>
    </form>
    <FactionView Faction="player?.Faction"></FactionView>
}