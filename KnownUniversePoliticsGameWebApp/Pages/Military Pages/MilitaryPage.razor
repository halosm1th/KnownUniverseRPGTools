@page "/MilitaryPage"
@using KnownUniversePoliticsGameWebApp.Data
@inject KnownUniversePoliticsGameService PoliticsGameService
@inject KUPEventService EventService;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
<h3>MilitaryPage</h3>

@code {

    enum MilitaryAction
    {
        MoveShip,
        TakeSystem,
        TakeAsset,
        CaptureSystem,
    }
    
    string OperationMessage = "";
    KUPPlayer player;
    KUPFilledSystem system;
    int ShipAssetID = -1;
    int targetAssetID = -1;
    string shipLoc = "";
    int shipX = -1;
    int shipY = -1;
    bool LoggedIn = false;
    bool UsedShip = false;
    MilitaryAction _militaryAction = MilitaryAction.MoveShip;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var loggedIn = await localStorage.GetItemAsync<string>("LoggedIn");
        if (loggedIn == "True")
        {
            var playerName = await localStorage.GetItemAsync<string>("LoggedInAs");
            player = PoliticsGameService.GetPlayer(playerName);
            LoggedIn = true;
        }
    }
    
    
    private void DoSomething()
    {
        var temp = LoggedIn;
        LoggedIn = temp;
    }


    private void PerformMilitaryAction()
    {
        if (ShipAssetID != -1)
        {
            UsedShip = true;
            if (_militaryAction == MilitaryAction.TakeSystem)
            {
                var loc = PoliticsGameService.GetAsset(ShipAssetID).Location;
                var system = PoliticsGameService.FindSystem(loc.SystemX, loc.SystemY);
                var locID = system.SystemsPrimaryStation.PrimaryStationAsset.assetID;
                EventService.AddEvent(new
                    KUPTakeSystemEvent(player.Faction.SenderID, locID));

            }
            else if (_militaryAction == MilitaryAction.CaptureSystem)
            {
                var loc = PoliticsGameService.GetAsset(ShipAssetID).Location;
                var system = PoliticsGameService.FindSystem(loc.SystemX, loc.SystemY);
                var locID = system.SystemsPrimaryStation.PrimaryStationAsset.assetID;
                EventService.AddEvent(new
                    KUPCaptureSystemEvent(player.Faction.SenderID, locID));

            }
            else if (_militaryAction == MilitaryAction.TakeAsset && targetAssetID != -1)
            {

                var loc = PoliticsGameService.GetAsset(ShipAssetID).Location;
                var system = PoliticsGameService.FindSystem(loc.SystemX, loc.SystemY);
                var locID = system.POIAssets().First(x => x.assetID == targetAssetID);
                EventService.AddEvent(new
                    KUPTakeAssetEvent(player.Faction.SenderID, locID.assetID));
            }
            else if (_militaryAction == MilitaryAction.MoveShip && shipLoc != "none" && shipLoc != "")
            {
                var loc = shipLoc.Split(" ");
                var x = Convert.ToInt32(loc[0]);
                var y = Convert.ToInt32(loc[1]);
                var dest = new KUPLocation(x, y);
                var ID = PoliticsGameService.GetShip(ShipAssetID).ReciverID;
                EventService.AddEvent(new
                    KUPMoveAssetEvent(player.Faction.SenderID, ID, dest));
            }
        }
    }

    private void AnotherShipAction()
    {
        UsedShip = false;
    }

}

@if (LoggedIn)
{
    <h3>@player.Faction.Name</h3>
    <div>
        <h4>List of Military Assets</h4>
        <ul>
            @foreach (var asset in player.Faction.GetMilitaryAssets())
            {
                <li>@asset</li>
            }
        </ul>
    </div>
    <div>
        @if (!UsedShip)
        {
            <h4>Use A ship</h4>
            <label for="SelectShip">Select a Ship</label>
            <select @bind="ShipAssetID" id="SelectShip">
                <option selected value="-1">None</option>
                @foreach (var asset in player.Faction.GetMilitaryAssets())
                {
                    @if (_militaryAction == MilitaryAction.MoveShip && asset.HasMoved)
                    {

                    }
                    else
                    {
                        <option value="@asset.assetID">@asset.Name (@asset.Location)</option>
                    }
                }
            </select>
            <label for="SelectAction">Select an Action</label>           
            <select @bind="_militaryAction" id="SelectAction">
            @if (ShipAssetID != -1)
            {

                <option selected value="@MilitaryAction.MoveShip">Move Ship</option>
                {
                    var loc = PoliticsGameService.GetAsset(ShipAssetID).Location;
                    system = PoliticsGameService.FindSystem(loc.SystemX, loc.SystemY);
                    if (system != null && system.GetType() == typeof(KUPFilledSystem))
                    {
                        if (system.SystemsPrimaryStation.PrimaryStationAsset.Controller == null 
                            || system.SystemsPrimaryStation.PrimaryStationAsset.Controller .FactionType == FactionType.Unclaimed)
                        {

                            <option value="@MilitaryAction.TakeSystem">Take System</option>
                        }
                        else if (system.GetUnclaimedPOI().Count > 0)
                        {
                            <option value="@MilitaryAction.TakeAsset">Take Asset</option>
                        }
                        else if (PoliticsGameService.CouldCaptureSystem(system))
                        {
                            <option value="@MilitaryAction.CaptureSystem">Capture System</option>

                        }
                    }
                }
            }
                </select>

                <label>Extra Information</label>
                @if (_militaryAction == MilitaryAction.MoveShip)
                {
                    <select @bind="shipLoc">
                        <option selected value="none">None</option>
                        @if (player.Faction.CombatAssets.Any(x => x.assetID == ShipAssetID))
                        {
                            @foreach (var shipLoc in (
                                (KUPCombatAsset) player.Faction.CombatAssets
                                    .First(x => x.assetID == ShipAssetID))
                                .MoveLocations())
                            {
                                <option value="@shipLoc.SystemX @shipLoc.SystemY">
                                    @shipLoc.SystemX @shipLoc.SystemY;
                                </option>
                            }
                        }
                    </select>
                }
                else if (_militaryAction == MilitaryAction.TakeAsset)
                {
                    <select @bind="targetAssetID">
                        <option selected value="-1">None</option>
                        @foreach (var asset in system?.POIAssets() ?? new List<IKUPAsset>())
                        {
                            <option selected value="@asset.assetID">@asset.Name</option>
                        }
                    </select>
                }
                <button @onclick="PerformMilitaryAction">Execute!</button>
            }     
        else
        {
            <p>Ship action submitted!</p>
            <button @onclick="AnotherShipAction">Hit me to do another ship action</button>
        }
    </div>
      
    <BuildShip Faction="player.Faction"></BuildShip>
}
else
{
    <button type="button" @onclick="DoSomething">Click me.</button>
    <p>If not logged in, will do nothing. To log in, go to the player page and log in.</p>
}